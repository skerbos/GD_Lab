//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/MarioActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MarioActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MarioActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MarioActions"",
    ""maps"": [
        {
            ""name"": ""gamplay"",
            ""id"": ""c16890cf-9e92-40a8-88e2-82acf36624f9"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""c7789212-3891-4ee1-802e-91e02a8cc724"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""aimlook"",
                    ""type"": ""Value"",
                    ""id"": ""047be507-cce9-47e1-ab2f-ef9b693295a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""a309bc65-bf0e-417c-b0a3-dac19734e008"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jumphold"",
                    ""type"": ""Button"",
                    ""id"": ""6a578387-6068-4ef2-8627-c0e554578245"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9129d17d-bfc3-44fa-ac80-602c022d1779"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0c94e5bd-4dfb-4615-9000-c0ea4fa676c9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""20a55fb9-9649-433a-8cc8-bacf05d91b81"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4358f17a-a456-43d9-9465-e47c926e6ef0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""KB&M"",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26dd2567-198c-4c4b-9509-1e12843e20a3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold(duration=0.3)"",
                    ""processors"": """",
                    ""groups"": ""KB&M"",
                    ""action"": ""jumphold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74efa5c0-1ce2-476c-8457-113e5dac908c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB&M"",
                    ""action"": ""aimlook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KB&M"",
            ""bindingGroup"": ""KB&M"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // gamplay
        m_gamplay = asset.FindActionMap("gamplay", throwIfNotFound: true);
        m_gamplay_move = m_gamplay.FindAction("move", throwIfNotFound: true);
        m_gamplay_aimlook = m_gamplay.FindAction("aimlook", throwIfNotFound: true);
        m_gamplay_jump = m_gamplay.FindAction("jump", throwIfNotFound: true);
        m_gamplay_jumphold = m_gamplay.FindAction("jumphold", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // gamplay
    private readonly InputActionMap m_gamplay;
    private List<IGamplayActions> m_GamplayActionsCallbackInterfaces = new List<IGamplayActions>();
    private readonly InputAction m_gamplay_move;
    private readonly InputAction m_gamplay_aimlook;
    private readonly InputAction m_gamplay_jump;
    private readonly InputAction m_gamplay_jumphold;
    public struct GamplayActions
    {
        private @MarioActions m_Wrapper;
        public GamplayActions(@MarioActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_gamplay_move;
        public InputAction @aimlook => m_Wrapper.m_gamplay_aimlook;
        public InputAction @jump => m_Wrapper.m_gamplay_jump;
        public InputAction @jumphold => m_Wrapper.m_gamplay_jumphold;
        public InputActionMap Get() { return m_Wrapper.m_gamplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamplayActions set) { return set.Get(); }
        public void AddCallbacks(IGamplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamplayActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @aimlook.started += instance.OnAimlook;
            @aimlook.performed += instance.OnAimlook;
            @aimlook.canceled += instance.OnAimlook;
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
            @jumphold.started += instance.OnJumphold;
            @jumphold.performed += instance.OnJumphold;
            @jumphold.canceled += instance.OnJumphold;
        }

        private void UnregisterCallbacks(IGamplayActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @aimlook.started -= instance.OnAimlook;
            @aimlook.performed -= instance.OnAimlook;
            @aimlook.canceled -= instance.OnAimlook;
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
            @jumphold.started -= instance.OnJumphold;
            @jumphold.performed -= instance.OnJumphold;
            @jumphold.canceled -= instance.OnJumphold;
        }

        public void RemoveCallbacks(IGamplayActions instance)
        {
            if (m_Wrapper.m_GamplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamplayActions @gamplay => new GamplayActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KB&M");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface IGamplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAimlook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnJumphold(InputAction.CallbackContext context);
    }
}
